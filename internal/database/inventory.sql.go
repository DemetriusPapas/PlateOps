// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: inventory.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInventoryItem = `-- name: CreateInventoryItem :one
INSERT INTO inventory (
    user_id,
    product_id,
    expiration_date,
    current_quantity
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, product_id, expiration_date, is_opened, current_quantity, purchase_date, opened_date, created_at, updated_at
`

type CreateInventoryItemParams struct {
	UserID          pgtype.UUID
	ProductID       int32
	ExpirationDate  pgtype.Date
	CurrentQuantity float64
}

func (q *Queries) CreateInventoryItem(ctx context.Context, arg CreateInventoryItemParams) (Inventory, error) {
	row := q.db.QueryRow(ctx, createInventoryItem,
		arg.UserID,
		arg.ProductID,
		arg.ExpirationDate,
		arg.CurrentQuantity,
	)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.ExpirationDate,
		&i.IsOpened,
		&i.CurrentQuantity,
		&i.PurchaseDate,
		&i.OpenedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInventoryItem = `-- name: DeleteInventoryItem :exec
DELETE FROM inventory
WHERE id = $1
`

func (q *Queries) DeleteInventoryItem(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteInventoryItem, id)
	return err
}

const getInventoryItemById = `-- name: GetInventoryItemById :one
SELECT id, user_id, product_id, expiration_date, is_opened, current_quantity, purchase_date, opened_date, created_at, updated_at, name, gtin, category, description, unit_type, quantity, expiration_after_opening, nutrients_per_item, calories, fats, saturated, carbs, sugars, protein, fiber, sodium
FROM inventory_item_with_info
WHERE id = $1
`

func (q *Queries) GetInventoryItemById(ctx context.Context, id int32) (InventoryItemWithInfo, error) {
	row := q.db.QueryRow(ctx, getInventoryItemById, id)
	var i InventoryItemWithInfo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.ExpirationDate,
		&i.IsOpened,
		&i.CurrentQuantity,
		&i.PurchaseDate,
		&i.OpenedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Gtin,
		&i.Category,
		&i.Description,
		&i.UnitType,
		&i.Quantity,
		&i.ExpirationAfterOpening,
		&i.NutrientsPerItem,
		&i.Calories,
		&i.Fats,
		&i.Saturated,
		&i.Carbs,
		&i.Sugars,
		&i.Protein,
		&i.Fiber,
		&i.Sodium,
	)
	return i, err
}

const getInventoryItemsByGtin = `-- name: GetInventoryItemsByGtin :many
SELECT id, user_id, product_id, expiration_date, is_opened, current_quantity, purchase_date, opened_date, created_at, updated_at, name, gtin, category, description, unit_type, quantity, expiration_after_opening, nutrients_per_item, calories, fats, saturated, carbs, sugars, protein, fiber, sodium
FROM inventory_item_with_info
WHERE GTIN = $1
`

func (q *Queries) GetInventoryItemsByGtin(ctx context.Context, gtin pgtype.Text) ([]InventoryItemWithInfo, error) {
	rows, err := q.db.Query(ctx, getInventoryItemsByGtin, gtin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InventoryItemWithInfo
	for rows.Next() {
		var i InventoryItemWithInfo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.ExpirationDate,
			&i.IsOpened,
			&i.CurrentQuantity,
			&i.PurchaseDate,
			&i.OpenedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Gtin,
			&i.Category,
			&i.Description,
			&i.UnitType,
			&i.Quantity,
			&i.ExpirationAfterOpening,
			&i.NutrientsPerItem,
			&i.Calories,
			&i.Fats,
			&i.Saturated,
			&i.Carbs,
			&i.Sugars,
			&i.Protein,
			&i.Fiber,
			&i.Sodium,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInventoryItemsByName = `-- name: GetInventoryItemsByName :many
SELECT id, user_id, product_id, expiration_date, is_opened, current_quantity, purchase_date, opened_date, created_at, updated_at, name, gtin, category, description, unit_type, quantity, expiration_after_opening, nutrients_per_item, calories, fats, saturated, carbs, sugars, protein, fiber, sodium
FROM inventory_item_with_info
WHERE name = $1
`

func (q *Queries) GetInventoryItemsByName(ctx context.Context, name string) ([]InventoryItemWithInfo, error) {
	rows, err := q.db.Query(ctx, getInventoryItemsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InventoryItemWithInfo
	for rows.Next() {
		var i InventoryItemWithInfo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.ExpirationDate,
			&i.IsOpened,
			&i.CurrentQuantity,
			&i.PurchaseDate,
			&i.OpenedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Gtin,
			&i.Category,
			&i.Description,
			&i.UnitType,
			&i.Quantity,
			&i.ExpirationAfterOpening,
			&i.NutrientsPerItem,
			&i.Calories,
			&i.Fats,
			&i.Saturated,
			&i.Carbs,
			&i.Sugars,
			&i.Protein,
			&i.Fiber,
			&i.Sodium,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInventoryOfUser = `-- name: GetInventoryOfUser :many

SELECT id, user_id, product_id, expiration_date, is_opened, current_quantity, purchase_date, opened_date, created_at, updated_at, name, gtin, category, description, unit_type, quantity, expiration_after_opening, nutrients_per_item, calories, fats, saturated, carbs, sugars, protein, fiber, sodium
FROM inventory_item_with_info
WHERE user_id = $1
`

// inventory_item_with_info is a view that combines the data in the inventory table with the generic info for that product from the food_registry table
func (q *Queries) GetInventoryOfUser(ctx context.Context, userID pgtype.UUID) ([]InventoryItemWithInfo, error) {
	rows, err := q.db.Query(ctx, getInventoryOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InventoryItemWithInfo
	for rows.Next() {
		var i InventoryItemWithInfo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.ExpirationDate,
			&i.IsOpened,
			&i.CurrentQuantity,
			&i.PurchaseDate,
			&i.OpenedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Gtin,
			&i.Category,
			&i.Description,
			&i.UnitType,
			&i.Quantity,
			&i.ExpirationAfterOpening,
			&i.NutrientsPerItem,
			&i.Calories,
			&i.Fats,
			&i.Saturated,
			&i.Carbs,
			&i.Sugars,
			&i.Protein,
			&i.Fiber,
			&i.Sodium,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const inventoryItemAlterQuantity = `-- name: InventoryItemAlterQuantity :exec
UPDATE inventory
SET
    current_quantity = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type InventoryItemAlterQuantityParams struct {
	ID              int32
	CurrentQuantity float64
}

func (q *Queries) InventoryItemAlterQuantity(ctx context.Context, arg InventoryItemAlterQuantityParams) error {
	_, err := q.db.Exec(ctx, inventoryItemAlterQuantity, arg.ID, arg.CurrentQuantity)
	return err
}

const inventoryItemMarkOpened = `-- name: InventoryItemMarkOpened :exec
UPDATE inventory
SET 
    is_opened = TRUE, 
    opened_date = CURRENT_TIMESTAMP, 
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) InventoryItemMarkOpened(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, inventoryItemMarkOpened, id)
	return err
}

const inventoryItemMarkUnopened = `-- name: InventoryItemMarkUnopened :exec
UPDATE inventory
SET
    is_opened = FALSE,
    opened_date = NULL,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) InventoryItemMarkUnopened(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, inventoryItemMarkUnopened, id)
	return err
}

const updateInventoryItem = `-- name: UpdateInventoryItem :exec
UPDATE inventory
SET 
    product_id = $2,
    expiration_date = $3,
    purchase_date = $4,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateInventoryItemParams struct {
	ID             int32
	ProductID      int32
	ExpirationDate pgtype.Date
	PurchaseDate   pgtype.Timestamp
}

func (q *Queries) UpdateInventoryItem(ctx context.Context, arg UpdateInventoryItemParams) error {
	_, err := q.db.Exec(ctx, updateInventoryItem,
		arg.ID,
		arg.ProductID,
		arg.ExpirationDate,
		arg.PurchaseDate,
	)
	return err
}
