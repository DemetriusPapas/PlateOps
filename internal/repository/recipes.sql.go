// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recipes.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (
    user_id, 
    name,
    private,
    description,
    instructions,
    unit_type,
    quantity
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, name, private, description, instructions, unit_type, quantity, nutrients_per_portion, calories, fats, saturated, carbs, sugars, protein, fiber, sodium, created_at, updated_at
`

type CreateRecipeParams struct {
	UserID       pgtype.UUID
	Name         string
	Private      pgtype.Bool
	Description  pgtype.Text
	Instructions pgtype.Text
	UnitType     string
	Quantity     pgtype.Int4
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRow(ctx, createRecipe,
		arg.UserID,
		arg.Name,
		arg.Private,
		arg.Description,
		arg.Instructions,
		arg.UnitType,
		arg.Quantity,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Private,
		&i.Description,
		&i.Instructions,
		&i.UnitType,
		&i.Quantity,
		&i.NutrientsPerPortion,
		&i.Calories,
		&i.Fats,
		&i.Saturated,
		&i.Carbs,
		&i.Sugars,
		&i.Protein,
		&i.Fiber,
		&i.Sodium,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM recipes
WHERE id = $1
`

// should also call DeleteRecipeIngredients for the specific recipe id
func (q *Queries) DeleteRecipe(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRecipe, id)
	return err
}

const getRecipeById = `-- name: GetRecipeById :one
SELECT id, user_id, name, private, description, instructions, unit_type, quantity, nutrients_per_portion, calories, fats, saturated, carbs, sugars, protein, fiber, sodium, created_at, updated_at
FROM recipes
WHERE id = $1
`

func (q *Queries) GetRecipeById(ctx context.Context, id int32) (Recipe, error) {
	row := q.db.QueryRow(ctx, getRecipeById, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Private,
		&i.Description,
		&i.Instructions,
		&i.UnitType,
		&i.Quantity,
		&i.NutrientsPerPortion,
		&i.Calories,
		&i.Fats,
		&i.Saturated,
		&i.Carbs,
		&i.Sugars,
		&i.Protein,
		&i.Fiber,
		&i.Sodium,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRecipesByUser = `-- name: GetRecipesByUser :many
SELECT id, user_id, name, private, description, instructions, unit_type, quantity, nutrients_per_portion, calories, fats, saturated, carbs, sugars, protein, fiber, sodium, created_at, updated_at
FROM recipes
WHERE user_id = $1
`

func (q *Queries) GetRecipesByUser(ctx context.Context, userID pgtype.UUID) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, getRecipesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Private,
			&i.Description,
			&i.Instructions,
			&i.UnitType,
			&i.Quantity,
			&i.NutrientsPerPortion,
			&i.Calories,
			&i.Fats,
			&i.Saturated,
			&i.Carbs,
			&i.Sugars,
			&i.Protein,
			&i.Fiber,
			&i.Sodium,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipesByUserAndName = `-- name: GetRecipesByUserAndName :many
SELECT id, user_id, name, private, description, instructions, unit_type, quantity, nutrients_per_portion, calories, fats, saturated, carbs, sugars, protein, fiber, sodium, created_at, updated_at
FROM recipes
WHERE user_id = $1 AND name = $2
`

type GetRecipesByUserAndNameParams struct {
	UserID pgtype.UUID
	Name   string
}

func (q *Queries) GetRecipesByUserAndName(ctx context.Context, arg GetRecipesByUserAndNameParams) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, getRecipesByUserAndName, arg.UserID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Private,
			&i.Description,
			&i.Instructions,
			&i.UnitType,
			&i.Quantity,
			&i.NutrientsPerPortion,
			&i.Calories,
			&i.Fats,
			&i.Saturated,
			&i.Carbs,
			&i.Sugars,
			&i.Protein,
			&i.Fiber,
			&i.Sodium,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipe = `-- name: UpdateRecipe :exec
UPDATE recipes
SET
    user_id = $2,
    name = $3,
    private = $4,
    description = $5,
    instructions = $6,
    unit_type = $7,
    quantity = $8,
    nutrients_per_portion = $9,
    calories = $10,
    fats = $11,
    saturated = $12,
    carbs = $13,
    sugars = $14,
    protein = $15,
    fiber = $16,
    sodium = $17,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateRecipeParams struct {
	ID                  int32
	UserID              pgtype.UUID
	Name                string
	Private             pgtype.Bool
	Description         pgtype.Text
	Instructions        pgtype.Text
	UnitType            string
	Quantity            pgtype.Int4
	NutrientsPerPortion pgtype.Bool
	Calories            pgtype.Numeric
	Fats                pgtype.Numeric
	Saturated           pgtype.Numeric
	Carbs               pgtype.Numeric
	Sugars              pgtype.Numeric
	Protein             pgtype.Numeric
	Fiber               pgtype.Numeric
	Sodium              pgtype.Numeric
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) error {
	_, err := q.db.Exec(ctx, updateRecipe,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Private,
		arg.Description,
		arg.Instructions,
		arg.UnitType,
		arg.Quantity,
		arg.NutrientsPerPortion,
		arg.Calories,
		arg.Fats,
		arg.Saturated,
		arg.Carbs,
		arg.Sugars,
		arg.Protein,
		arg.Fiber,
		arg.Sodium,
	)
	return err
}
