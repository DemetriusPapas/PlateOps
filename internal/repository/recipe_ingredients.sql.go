// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recipe_ingredients.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRecipeIngredient = `-- name: CreateRecipeIngredient :one
INSERT INTO recipe_ingredients (
    recipe_id,
    product_id,
    quantity
) VALUES ( $1, $2, $3 )
RETURNING id, recipe_id, product_id, quantity
`

type CreateRecipeIngredientParams struct {
	RecipeID  pgtype.Int4
	ProductID pgtype.Int4
	Quantity  float64
}

func (q *Queries) CreateRecipeIngredient(ctx context.Context, arg CreateRecipeIngredientParams) (RecipeIngredient, error) {
	row := q.db.QueryRow(ctx, createRecipeIngredient, arg.RecipeID, arg.ProductID, arg.Quantity)
	var i RecipeIngredient
	err := row.Scan(
		&i.ID,
		&i.RecipeID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const deleteRecipeIngredient = `-- name: DeleteRecipeIngredient :exec
DELETE FROM recipe_ingredients
WHERE id = $1
`

func (q *Queries) DeleteRecipeIngredient(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRecipeIngredient, id)
	return err
}

const getRecipeIngredient = `-- name: GetRecipeIngredient :one
SELECT id, recipe_id, product_id, quantity
FROM recipe_ingredients
WHERE id = $1
`

func (q *Queries) GetRecipeIngredient(ctx context.Context, id int32) (RecipeIngredient, error) {
	row := q.db.QueryRow(ctx, getRecipeIngredient, id)
	var i RecipeIngredient
	err := row.Scan(
		&i.ID,
		&i.RecipeID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const getRecipeIngredientsByProduct = `-- name: GetRecipeIngredientsByProduct :many
SELECT id, recipe_id, product_id, quantity
FROM recipe_ingredients
WHERE product_id = $1
`

func (q *Queries) GetRecipeIngredientsByProduct(ctx context.Context, productID pgtype.Int4) ([]RecipeIngredient, error) {
	rows, err := q.db.Query(ctx, getRecipeIngredientsByProduct, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecipeIngredient
	for rows.Next() {
		var i RecipeIngredient
		if err := rows.Scan(
			&i.ID,
			&i.RecipeID,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipeIngredientsByRecipe = `-- name: GetRecipeIngredientsByRecipe :many
SELECT id, recipe_id, product_id, quantity
FROM recipe_ingredients
WHERE recipe_id = $1
`

func (q *Queries) GetRecipeIngredientsByRecipe(ctx context.Context, recipeID pgtype.Int4) ([]RecipeIngredient, error) {
	rows, err := q.db.Query(ctx, getRecipeIngredientsByRecipe, recipeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecipeIngredient
	for rows.Next() {
		var i RecipeIngredient
		if err := rows.Scan(
			&i.ID,
			&i.RecipeID,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipeIngredient = `-- name: UpdateRecipeIngredient :exec
UPDATE recipe_ingredients
SET quantity = $2
WHERE id = $1
`

type UpdateRecipeIngredientParams struct {
	ID       int32
	Quantity float64
}

func (q *Queries) UpdateRecipeIngredient(ctx context.Context, arg UpdateRecipeIngredientParams) error {
	_, err := q.db.Exec(ctx, updateRecipeIngredient, arg.ID, arg.Quantity)
	return err
}
